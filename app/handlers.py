import types
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ContentType, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from app.database.models import User, UserStatus
from app.database.models import get_session
from app.google.google import update_google_sheet
import app.keyboards as kb
import logging
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy import update
import re
from .constants import start_message, character_captain, congratulation_prticipant, congratulation_captain
import csv
from pathlib import Path

# –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
CSV_PATH = Path(__file__).parent / 'database' / 'emails.csv'
CSV_PATH_LINKS = Path(__file__).parent / 'links.csv'

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
router = Router()

def read_links_from_csv(file_path):
    logger.info('START READ CSV LINKS FILE')
    links_dict = {}
    with open(file_path, mode='r', encoding='utf-8') as file:
        reader = csv.DictReader(file, delimiter=',')  # –æ–∂–∏–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ';'
        for row in reader:
            logger.info(f'{row} START WORKING')
            telegram_id = int(row['telegramId'])
            link = row['link'].strip()
            links_dict[telegram_id] = link
    return links_dict

def validate_name(name):
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞
    return len(name.split()) >= 2

def validate_phone(phone):
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    pattern = r'^(\+?\d{1,4})?[-.\s]?\(?[0-9]{1,4}\)?[-.\s]?[0-9]{1,4}[-.\s]?[0-9]{1,9}$'
    return re.match(pattern, phone) is not None

def validate_email(email):
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return re.match(pattern, email) is not None

def read_emails_from_csv(file_path):
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        return set(email.strip().lower() for row in reader for email in row)
    
# –ó–∞–≥—Ä—É–∑–∏–º emails –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
ALLOWED_EMAILS = read_emails_from_csv(CSV_PATH)

class UserState(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_email = State()
    waiting_for_age = State()
    waiting_for_occupation = State()
    waiting_for_city = State()
    waiting_for_crypto_experience = State()
    waiting_for_programs = State()
    waiting_for_captain_motivation = State()

questions = [
    "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞—à–µ –§–ò–û üëá",
    "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëá",
    "–°—É–ø–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –æ–±—É—á–µ–Ω–∏–∏.\n\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Å –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—É—á–µ–Ω–∏—è üëå",
    "–ü—Ä–∏–Ω—è—Ç–æ üëç\n\n–ï—â–µ —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤üôÇ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É)",
    "–í–∞—à —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?",
    "–û—Ç–ª–∏—á–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π üëá",
    "–£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –ª–∏ –≤—ã —Ä–∞–Ω–µ–µ –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –ê–∑–∞—Ç–∞ –í–∞–ª–µ–µ–≤–∞? –ï—Å–ª–∏ –¥–∞, —É–∫–∞–∂–∏—Ç–µ –≤ –∫–∞–∫–∏—Ö. (–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)\n\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä¬ª",
    "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –º–æ—Ç–∏–≤–∞—Ü–∏—é —Å—Ç–∞—Ç—å –ö–∞–ø–∏—Ç–∞–Ω–æ–º?"
]

state_order = [
    UserState.waiting_for_name,
    UserState.waiting_for_phone,
    UserState.waiting_for_email,
    UserState.waiting_for_age,
    UserState.waiting_for_occupation,
    UserState.waiting_for_city,
    UserState.waiting_for_crypto_experience,
    UserState.waiting_for_programs
]

async def check_user_data_completeness(user):
    required_fields = ['name', 'phone', 'email', 'age', 'occupation', 'city', 'crypto_experience', 'programs']
    for field in required_fields:
        value = getattr(user, field)
        if field == 'age':
            if not isinstance(value, int) or value <= 0:
                logger.info(f"Field {field} is not complete: {value}")
                return False
        elif field == 'programs':
            if not isinstance(value, list) or len(value) == 0:
                logger.info(f"Field {field} is not complete: {value}")
                return False
        else:
            if value is None or (isinstance(value, str) and value.strip() == ''):
                logger.info(f"Field {field} is not complete: {value}")
                return False
    return True

@router.message(F.text == '/start join')
async def cmd_start(message: Message, state: FSMContext):
    async for session in get_session():
        try:
            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            query = select(User).where(User.telegram_id == message.from_user.id)
            result = await session.execute(query)
            user = result.scalar_one_or_none()

            if user:
                is_complete = await check_user_data_completeness(user)
                logger.info(f"User data completeness: {is_complete}")
                if is_complete:
                    await message.answer(
                        "–í—ã —É–∂–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!\n"
                        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É. –¢–∞–º —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!"
                    )
                else:
                    await message.answer(
                        "–í—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –µ–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É. –¢–∞–º —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!"
                    )
                    await state.set_state(UserState.waiting_for_name)
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                new_user = User(
                    telegram_id=message.from_user.id,
                    telegram=message.from_user.username,
                    status=UserStatus.student
                )
                session.add(new_user)
                await session.commit()

                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
                await message.answer(start_message, reply_markup=kb.start_keyboard)
                await state.set_state(UserState.waiting_for_name)

        except Exception as e:
            logger.error(f"Error in cmd_start: {e}", exc_info=True)
            await session.rollback()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            await session.close()
    

@router.callback_query(F.data == "become_participant")
async def process_callback_become_participant(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.waiting_for_name)
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ!üôÇ\n–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è\n\n" + questions[0])

async def save_to_db(session, telegram_id, data):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        stmt = select(User).where(User.telegram_id == telegram_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            stmt = update(User).where(User.telegram_id == telegram_id).values(**data)
            await session.execute(stmt)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            stmt = insert(User).values(telegram_id=telegram_id, **data)
            await session.execute(stmt)

        await session.commit()
        return True
    except Exception as e:
        logger.error(f"Error saving user data to DB: {e}", exc_info=True)
        await session.rollback()
        return False

@router.message(Command("edit"))
async def cmd_edit(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(UserState.waiting_for_name)
    await message.answer("–î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. " + questions[0])

@router.callback_query(F.data == "edit_info")
async def cmd_edit(callback: CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(UserState.waiting_for_name)
    await callback.message.answer("–î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. " + questions[0])

@router.message(UserState.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    if not validate_name(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é).")
        return
    await state.update_data(waiting_for_name=message.text)
    async for session in get_session():
        await save_to_db(session, message.from_user.id, {'name': message.text})
    await state.set_state(UserState.waiting_for_phone)
    await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text.split()[1]} üôå\n\n{questions[1]}", reply_markup=kb.phone_keyboard)

@router.message(UserState.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text if message.content_type != ContentType.CONTACT else message.contact.phone_number
    if not validate_phone(phone):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 79871011090, +79871011090, –∏–ª–∏ +7 (987)101-10-90")
        return
    await state.update_data(waiting_for_phone=phone)
    async for session in get_session():
        await save_to_db(session, message.from_user.id, {'phone': phone})
    await state.set_state(UserState.waiting_for_email)
    await message.answer(questions[2], reply_markup=ReplyKeyboardRemove())

@router.message(UserState.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    if not validate_email(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.")
        return
    
    email = message.text.strip().lower()
    
    if email not in ALLOWED_EMAILS:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω—ã–π email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º.")
        return
    
    await state.update_data(waiting_for_email=email)
    async for session in get_session():
        await save_to_db(session, message.from_user.id, {'email': email})
    await state.set_state(UserState.waiting_for_age)
    await message.answer(questions[3])

@router.message(UserState.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 10 or int(message.text) > 100:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 100).")
        return
    age = int(message.text)
    await state.update_data(waiting_for_age=age)
    async for session in get_session():
        await save_to_db(session, message.from_user.id, {'age': age})
    await state.set_state(UserState.waiting_for_occupation)
    await message.answer(questions[4])

@router.message(UserState.waiting_for_occupation)
async def process_occupation(message: Message, state: FSMContext):
    await state.update_data(waiting_for_occupation=message.text)
    async for session in get_session():
        await save_to_db(session, message.from_user.id, {'occupation': message.text})
    await state.set_state(UserState.waiting_for_city)
    await message.answer(questions[5])

@router.message(UserState.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(waiting_for_city=message.text)
    async for session in get_session():
        await save_to_db(session, message.from_user.id, {'city': message.text})
    await state.set_state(UserState.waiting_for_crypto_experience)
    await message.answer(questions[6])

@router.message(UserState.waiting_for_crypto_experience)
async def process_crypto_experience(message: Message, state: FSMContext):
    await state.update_data(waiting_for_crypto_experience=message.text)
    async for session in get_session():
        await save_to_db(session, message.from_user.id, {'crypto_experience': message.text})
    await state.set_state(UserState.waiting_for_programs)
    await message.answer(questions[7], reply_markup=kb.get_programs_keyboard())

@router.callback_query(F.data.startswith("program:"))
async def process_program_selection(callback: CallbackQuery, state: FSMContext):
    program = callback.data.split(":")[1]
    user_data = await state.get_data()
    programs = user_data.get('programs', [])
    
    if program in programs:
        programs.remove(program)
    else:
        programs.append(program)
    
    await state.update_data(programs=programs)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    
    async for session in get_session():
        await save_to_db(session, callback.from_user.id, {'programs': programs})
    
    await callback.answer(f"{'–í—ã–±—Ä–∞–Ω–æ' if program in programs else '–û—Ç–º–µ–Ω–µ–Ω–æ'}: {program}")
    await update_programs_message(callback.message, programs)

async def update_programs_message(message: Message, programs: list):
    text = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n" + "\n".join(f"‚úÖ {program}" for program in programs) if programs else "–ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    await message.edit_text(text, reply_markup=kb.get_programs_keyboard(programs))

@router.callback_query(F.data == "confirm_programs")
async def confirm_programs(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    programs = user_data.get('programs', [])
    
    if not programs:
        await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–ª–∏ '–ù–µ —è–≤–ª—è—é—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º'.", show_alert=True)
        return
    
    async for session in get_session():
        await save_to_db(session, callback.from_user.id, {'programs': programs})
    
    await state.set_state(UserState.waiting_for_captain_motivation)
    await callback.message.edit_text(congratulation_prticipant, reply_markup=kb.captain_keyboard)

@router.callback_query(F.data == "about_captains")
async def process_callback_about_captains(callback: CallbackQuery):
    await callback.message.edit_text(character_captain, reply_markup=kb.captain_decision_keyboard)

@router.callback_query(F.data == "become_captain")
async def process_callback_become_captain(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.waiting_for_captain_motivation)
    await callback.message.edit_text(questions[-1])

# –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é process_callback_not_interested –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
@router.callback_query(F.data == "not_interested")
async def process_callback_not_interested(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    async for session in get_session():
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_user = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
            existing_user = existing_user.scalar_one_or_none()

            if existing_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
                update_data = {}
                if 'waiting_for_name' in user_data:
                    update_data['name'] = user_data['waiting_for_name']
                if 'waiting_for_phone' in user_data:
                    update_data['phone'] = user_data['waiting_for_phone']
                if 'waiting_for_email' in user_data:
                    update_data['email'] = user_data['waiting_for_email']
                if 'waiting_for_occupation' in user_data:
                    update_data['occupation'] = user_data['waiting_for_occupation']
                if 'waiting_for_city' in user_data:
                    update_data['city'] = user_data['waiting_for_city']
                if 'waiting_for_crypto_experience' in user_data:
                    update_data['crypto_experience'] = user_data['waiting_for_crypto_experience']
                if 'programs' in user_data:
                    update_data['programs'] = user_data['programs']
                
                update_data['captain_motivation'] = "–ù–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω"
                update_data['status'] = UserStatus.student

                if 'waiting_for_age' in user_data:
                    age = user_data['waiting_for_age']
                    if isinstance(age, int):
                        update_data['age'] = age
                    elif isinstance(age, str) and age.isdigit():
                        update_data['age'] = int(age)

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                for key, value in update_data.items():
                    setattr(existing_user, key, value)

                await session.commit()
            else:
                logger.warning(f"User with telegram_id {callback.from_user.id} not found in database")

            await callback.message.edit_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.",
                reply_markup=kb.final_keyboard
            )
            
        except Exception as e:
            logger.error(f"Error updating user data: {e}", exc_info=True)
            await session.rollback()
        finally:
            await session.close()
    
    await state.clear()

@router.callback_query(F.data == "become_captain")
async def process_callback_become_captain(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.waiting_for_captain_motivation)
    await callback.message.edit_text(questions[-1])

# –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é process_captain_motivation –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
@router.message(UserState.waiting_for_captain_motivation)
async def process_captain_motivation(message: Message, state: FSMContext):
    await state.update_data(captain_motivation=message.text)
    user_data = await state.get_data()
    logger.info(f"Updated state data: {user_data}")
    
    async for session in get_session():
        try:
            update_data = {
                'name': user_data.get('waiting_for_name'),
                'phone': user_data.get('waiting_for_phone'),
                'email': user_data.get('waiting_for_email'),
                'occupation': user_data.get('waiting_for_occupation'),
                'city': user_data.get('waiting_for_city'),
                'crypto_experience': user_data.get('waiting_for_crypto_experience'),
                'programs': user_data.get('programs', []),
                'captain_motivation': user_data.get('captain_motivation'),
                'status': UserStatus.captain
            }

            age = user_data.get('waiting_for_age')
            if age is not None:
                try:
                    update_data['age'] = int(age)
                except ValueError:
                    logger.warning(f"Invalid age value: {age}. Skipping age update.")

            stmt = update(User).where(User.telegram_id == message.from_user.id).values(**update_data)
            
            await session.execute(stmt)
            await session.commit()
            
            logger.info(f"User updated successfully")
            
            await message.answer(congratulation_captain)
        except Exception as e:
            logger.error(f"Error updating user in database: {e}", exc_info=True)
            await session.rollback()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        finally:
            await session.close()
    
    await state.clear()
    logger.info("Finished process_captain_motivation")

@router.message(Command("update_sheet"))
async def cmd_update_sheet(message: Message):
    await message.answer("–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google —Ç–∞–±–ª–∏—Ü—ã...")
    try:
        async for session in get_session():
            await update_google_sheet(session)
        await message.answer("Google —Ç–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"Error updating Google Sheet: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Google —Ç–∞–±–ª–∏—Ü—ã.")

@router.message(Command('send_links'))
async def send_links_to_all_users(message: Message):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
        links_data = read_links_from_csv(CSV_PATH_LINKS)

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ CSV
        for telegram_id, link in links_data.items():
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –µ–≥–æ —Å—Å—ã–ª–∫–æ–π
                await message.bot.send_message(chat_id=telegram_id, text=f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∂–µ—Ç—Å—è –≤—ã –≤—Å–µ –µ—â–µ –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–≤–æ—é \"–î–µ—Å—è—Ç–∫—É\" üí´\n\n–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:\n{link}")
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {telegram_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

        await message.answer("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")